{
  "_args": [
    [
      {
        "raw": "oauth-1.0a@^2.0.0",
        "scope": null,
        "escapedName": "oauth-1.0a",
        "name": "oauth-1.0a",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "C:\\xampp\\htdocs\\M-Tush\\Mtush-web\\node_modules\\woocommerce-api"
    ]
  ],
  "_from": "oauth-1.0a@>=2.0.0 <3.0.0",
  "_id": "oauth-1.0a@2.2.2",
  "_inCache": true,
  "_location": "/oauth-1.0a",
  "_nodeVersion": "6.10.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/oauth-1.0a-2.2.2.tgz_1505226163243_0.6365357388276607"
  },
  "_npmUser": {
    "name": "ddo",
    "email": "joeddo89@gmail.com"
  },
  "_npmVersion": "5.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "oauth-1.0a@^2.0.0",
    "scope": null,
    "escapedName": "oauth-1.0a",
    "name": "oauth-1.0a",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/woocommerce-api"
  ],
  "_resolved": "https://registry.npmjs.org/oauth-1.0a/-/oauth-1.0a-2.2.2.tgz",
  "_shasum": "9836a9f957d1f4c6b66661cc61c8f22763a05c83",
  "_shrinkwrap": null,
  "_spec": "oauth-1.0a@^2.0.0",
  "_where": "C:\\xampp\\htdocs\\M-Tush\\Mtush-web\\node_modules\\woocommerce-api",
  "author": {
    "name": "Ddo"
  },
  "bugs": {
    "url": "https://github.com/ddo/oauth-1.0a/issues"
  },
  "dependencies": {},
  "description": "OAuth 1.0a Request Authorization for Node and Browser.",
  "devDependencies": {
    "chai": "~1.8.1",
    "coveralls": "^2.10.0",
    "istanbul": "^0.2.7",
    "mocha": "~1.17.0",
    "request": "~2.33.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-fHRvq3aHoYXq8rZrXOX80nYgMc0svd4a88R4W7QLltJ1Rl+GFjW6Eu3rgR1zWB5MbuyqsWojADsS4vbmDiho/w==",
    "shasum": "9836a9f957d1f4c6b66661cc61c8f22763a05c83",
    "tarball": "https://registry.npmjs.org/oauth-1.0a/-/oauth-1.0a-2.2.2.tgz"
  },
  "gitHead": "8f40b641af43f626a2fc2888c5e2cb895b62ea6e",
  "homepage": "https://github.com/ddo/oauth-1.0a#readme",
  "keywords": [
    "oauth",
    "1.0a",
    "oauth1.0a",
    "authorize",
    "signature",
    "nonce",
    "consumer"
  ],
  "license": "MIT",
  "main": "oauth-1.0a.js",
  "maintainers": [
    {
      "name": "ddo",
      "email": "joeddo89@gmail.com"
    }
  ],
  "name": "oauth-1.0a",
  "optionalDependencies": {},
  "readme": "oauth-1.0a [![semaphore][semaphore-img]][semaphore-url]\n==========\n\n[![Join the chat at https://gitter.im/ddo/oauth-1.0a](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/ddo/oauth-1.0a?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![version][version-img]][version-url]\n[![download][download-img]][download-url]\n\n[![coverage][coverage-img]][coverage-url]\n[![climate][climate-img]][climate-url]\n\n[![dependency][dependency-img]][dependency-url]\n\n[semaphore-img]: https://semaphoreci.com/api/v1/ddo/oauth-1-0a/branches/master/badge.svg\n[semaphore-url]: https://semaphoreci.com/ddo/oauth-1-0a\n\n[download-img]: https://img.shields.io/npm/dm/oauth-1.0a.svg?style=flat-square\n[download-url]: https://www.npmjs.com/package/oauth-1.0a\n\n[version-img]: https://img.shields.io/npm/v/oauth-1.0a.svg?style=flat-square\n[version-url]: https://www.npmjs.com/package/oauth-1.0a\n\n[dependency-img]: https://img.shields.io/david/ddo/oauth-1.0a.svg?style=flat-square\n[dependency-url]: https://david-dm.org/ddo/oauth-1.0a\n\n[coverage-img]: https://img.shields.io/coveralls/ddo/oauth-1.0a/master.svg?style=flat-square\n[coverage-url]: https://coveralls.io/r/ddo/oauth-1.0a?branch=master\n\n[climate-img]: https://img.shields.io/codeclimate/github/ddo/oauth-1.0a.svg?style=flat-square\n[climate-url]: https://codeclimate.com/github/ddo/oauth-1.0a\n\nOAuth 1.0a Request Authorization for **Node** and **Browser**\n\nSend OAuth request with your favorite HTTP client ([request](https://github.com/mikeal/request), [jQuery.ajax](http://api.jquery.com/jQuery.ajax/)...)\n\nNo more headache about OAuth 1.0a's stuff or \"oauth_consumer_key, oauth_nonce, oauth_signature....\" parameters, just use your familiar HTTP client to send OAuth requests.\n\nTested on some popular OAuth 1.0a services:\n\n* Twitter\n* Flickr\n* Bitbucket\n* Linkedin\n* Openbankproject(HMAC-SHA256)\n\n## Quick Start\n\n```js\nvar crypto = require('crypto');\nvar OAuth = require('oauth-1.0a');\n\nvar oauth = OAuth({\n    consumer: {\n        key: '<your consumer key>',\n        secret: '<your consumer secret>'\n    },\n    signature_method: 'HMAC-SHA1',\n    hash_function: function(base_string, key) {\n        return crypto.createHmac('sha1', key).update(base_string).digest('base64');\n    }\n});\n```\n\nGet OAuth request data then you can use with your http client easily :)\n```js\noauth.authorize(request, token);\n```\n\nOr if you want to get as a header key-value data\n```js\noauth.toHeader(oauth_data);\n```\n\n## Crypto\nFrom version ``2.0.0``, crypto/hash stuff is separated.\n``oauth-1.0a`` will use your ``hash_function`` to sign.\n\n### Example\n\n#### Node.js\n\n```js\nvar crypto = require('crypto');\n\nfunction hash_function_sha1(base_string, key) {\n    return crypto.createHmac('sha1', key).update(base_string).digest('base64');\n}\n\nvar oauth = OAuth({\n    consumer: {\n        key: '<your consumer key>',\n        secret: '<your consumer secret>'\n    },\n    signature_method: 'HMAC-SHA1',\n    hash_function: hash_function_sha1\n});\n```\n\n* sha1: ``crypto.createHmac('sha1', key).update(base_string).digest('base64');``\n* sha256: ``crypto.createHmac('sha256', key).update(base_string).digest('base64');``\n* ...\n\n#### Browser\n*using google CryptoJS*\n\n* sha1: ``CryptoJS.HmacSHA1(base_string, key).toString(CryptoJS.enc.Base64);``\n* sha256: ``CryptoJS.HmacSHA256(base_string, key).toString(CryptoJS.enc.Base64);``\n* ...\n\n## Installation\n\n### Node.js\n    $ npm install oauth-1.0a --production\n\n* You can use the native crypto package for ``hash_function``.\n* It is possible for Node.js to be built without including support for the crypto module. In such cases, calling ``require('crypto')`` will result in an error being thrown.\n* You can use your own hash function which has format as:\n\n```js\n    function(base_string, key) return <string>\n```\n\n\n### Browser\nDownload oauth-1.0a.js [here](https://raw.githubusercontent.com/ddo/oauth-1.0a/master/oauth-1.0a.js)\n\nAnd also your crypto lib. For example [CryptoJS](https://code.google.com/archive/p/crypto-js/)\n\n```html\n<!-- sha1 -->\n<script src=\"http://crypto-js.googlecode.com/svn/tags/3.1.2/build/rollups/hmac-sha1.js\"></script>\n<!-- sha256 -->\n<script src=\"http://crypto-js.googlecode.com/svn/tags/3.1.2/build/rollups/hmac-sha256.js\"></script>\n\n<script src=\"http://crypto-js.googlecode.com/svn/tags/3.1.2/build/components/enc-base64-min.js\"></script>\n<script src=\"oauth-1.0a.js\"></script>\n```\n\n## Examples\n\n### Work with [request](https://github.com/mikeal/request) (Node.js)\n\nDepencies\n\n```js\nvar request = require('request');\nvar OAuth   = require('oauth-1.0a');\nvar crypto  = require('crypto');\n```\n\nInit\n```js\nvar oauth = OAuth({\n    consumer: {\n        key: 'xvz1evFS4wEEPTGEFPHBog',\n        secret: 'kAcSOqF21Fu85e7zjz7ZN2U4ZRhfV3WpwPAoE3Z7kBw'\n    },\n    signature_method: 'HMAC-SHA1',\n    hash_function: function(base_string, key) {\n        return crypto.createHmac('sha1', key).update(base_string).digest('base64');\n    }\n});\n```\n\nYour request data\n```js\nvar request_data = {\n\turl: 'https://api.twitter.com/1/statuses/update.json?include_entities=true',\n    method: 'POST',\n    data: {\n        status: 'Hello Ladies + Gentlemen, a signed OAuth request!'\n    }\n};\n```\n\nYour token (optional for some requests)\n```js\nvar token = {\n    key: '370773112-GmHxMAgYyLbNEtIKZeRNFsMKPR9EyMZeS9weJAEb',\n    secret: 'LswwdoUaIvS8ltyTt5jkRh4J50vUPVVHtR2YPi5kE'\n};\n```\n\nCall a request\n\n```js\nrequest({\n\turl: request_data.url,\n\tmethod: request_data.method,\n\tform: oauth.authorize(request_data, token)\n}, function(error, response, body) {\n\t//process your data here\n});\n```\n\nOr if you want to send OAuth data in request's header\n\n```js\nrequest({\n\turl: request_data.url,\n\tmethod: request_data.method,\n\tform: request_data.data,\n\theaders: oauth.toHeader(oauth.authorize(request_data, token))\n}, function(error, response, body) {\n\t//process your data here\n});\n```\n\n### Work with [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) (Browser)\n\n**Caution:** please make sure you understand what happen when use OAuth protocol at client side [here](#client-side-usage-caution)\n\nInit\n```js\nvar oauth = OAuth({\n    consumer: {\n        key: 'xvz1evFS4wEEPTGEFPHBog',\n        secret: 'kAcSOqF21Fu85e7zjz7ZN2U4ZRhfV3WpwPAoE3Z7kBw'\n    },\n    signature_method: 'HMAC-SHA1',\n    hash_function: function(base_string, key) {\n        return CryptoJS.HmacSHA1(base_string, key).toString(CryptoJS.enc.Base64);\n    }\n});\n```\n\nYour request data\n```js\nvar request_data = {\n\turl: 'https://api.twitter.com/1/statuses/update.json?include_entities=true',\n    method: 'POST',\n    data: {\n        status: 'Hello Ladies + Gentlemen, a signed OAuth request!'\n    }\n};\n```\n\nYour token (optional for some requests)\n```js\nvar token = {\n    key: '370773112-GmHxMAgYyLbNEtIKZeRNFsMKPR9EyMZeS9weJAEb',\n    secret: 'LswwdoUaIvS8ltyTt5jkRh4J50vUPVVHtR2YPi5kE'\n};\n```\n\nCall a request\n\n```js\n$.ajax({\n\turl: request_data.url,\n\ttype: request_data.method,\n\tdata: oauth.authorize(request_data, token)\n}).done(function(data) {\n\t//process your data here\n});\n```\n\nOr if you want to send OAuth data in request's header\n\n```js\n$.ajax({\n\turl: request_data.url,\n\ttype: request_data.method,\n\tdata: request_data.data,\n\theaders: oauth.toHeader(oauth.authorize(request_data, token))\n}).done(function(data) {\n\t//process your data here\n});\n```\n\n## .authorize(/* options */)\n\n* url: ``String``\n* method: ``String`` default ``'GET'``\n* data: ``Object`` any custom data you want to send with, including extra oauth option ``oauth_*`` as oauth_callback, oauth_version...\n* includeBodyHash: ``Boolean`` default ``false`` set to true if you want ``oauth_body_hash`` signing\n\n```js\nvar request_data = {\n    url: 'https://bitbucket.org/api/1.0/oauth/request_token',\n    method: 'POST',\n    data: {\n        oauth_callback: 'http://www.ddo.me'\n    }\n};\n```\n\n## .toHeader(/* signed data */)\n\nconvert signed data into headers\n\n```js\n$.ajax({\n    url: request_data.url,\n    type: request_data.method,\n    data: request_data.data,\n    headers: oauth.toHeader(oauth.authorize(request_data, token))\n}).done(function(data) {\n    //process your data here\n});\n```\n\n## Init Options\n```js\nvar oauth = OAuth(/* options */);\n```\n\n* ``consumer``: ``Object`` ``Required`` your consumer keys\n\n```js\n{\n    key: <your consumer key>,\n    secret: <your consumer secret>\n}\n```\n\n* ``signature_method``: ``String`` default ``'PLAINTEXT'``\n* ``hash_function``: ``Function`` if ``signature_method`` = ``'PLAINTEXT'`` default ``return key``\n* ``nonce_length``: ``Int`` default ``32``\n* ``version``: ``String`` default ``'1.0'``\n* ``parameter_seperator``: ``String`` for header only, default ``', '``. Note that there is a space after ``,``\n* ``realm``: ``String``\n* ``last_ampersand``: ``Bool`` default ``true``. For some services if there is no Token Secret then no need ``&`` at the end. Check [oauth doc](http://oauth.net/core/1.0a/#anchor22) for more information\n\n> oauth_signature is set to the concatenated encoded values of the Consumer Secret and Token Secret, separated by a '&' character (ASCII code 38), even if either secret is empty\n\n## Notes\n\n* Some OAuth requests without token use ``.authorize(request_data)`` instead of ``.authorize(request_data, {})``\n\n* Or just token key only ``.authorize(request_data, {key: 'xxxxx'})``\n\n* Want easier? Take a look:\n\n    * Node.js: [oauth-request](https://github.com/ddo/oauth-request)\n    * jquery: *soon*\n\n## Client Side Usage Caution\n\nOAuth is based around allowing tools and websites to talk to each other.\nHowever, JavaScript running in web browsers is hampered by security restrictions that prevent code running on one website from accessing data stored or served on another.\n\nBefore you start hacking, make sure you understand the limitations posed by cross-domain XMLHttpRequest.\n\nOn the bright side, some platforms use JavaScript as their language, but enable the programmer to access other web sites. Examples include:\n\n* **Google/Firefox/Safari extensions**\n* **Google Gadgets**\n* **Microsoft Sidebar**...\n\nFor those platforms, this library should come in handy.\n\n## [Changelog](https://github.com/ddo/oauth-1.0a/releases)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ddo/oauth-1.0a.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "2.2.2"
}
